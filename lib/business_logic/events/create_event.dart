import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:uuid/uuid.dart';

import 'package:shared_preferences/shared_preferences.dart';

String prefEmail = '';

//Get email from shared prefs
getEmail() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  return prefs.getString('email');
}

Future<String> createEvent(String category, String name, String image,
    String location, String time, double fee) async {
  //Get email from shared prefs
  getEmail().then((value) => prefEmail = value!);
  String imageUrl;
  try {
    Reference ref = FirebaseStorage.instance.ref();
    Reference referenceDirImages = ref.child('images');
    //Create a reference to the file you want to upload
    Reference referenceImageToUpload =
        referenceDirImages.child('events/$name.jpg');
    print(name);
    //Upload the file to firebase
    try {
      await referenceImageToUpload.putFile(File(image));
      imageUrl = await referenceImageToUpload.getDownloadURL();
    } on FirebaseException catch (e) {
      print('Error uploading image: $e');
      return 'Error uploading image: $e';
    }

    // Upload the event details to firestore
    try {
      final docRef = await FirebaseFirestore.instance.collection('events').add({
        'id': Uuid()
            .v4(), //unique id is automatically generated by firestore, no need to add it
        'owner': prefEmail,
        'event_category': category,
        'name': name,
        'image': imageUrl,
        'location': location,
        'time': time,
        'fee': fee,
        'created_at': FieldValue.serverTimestamp(),
      });
      await docRef.update({'id': docRef.id});
    } on FirebaseException catch (e) {
      print('Error uploading event details: $e');
      return 'Error uploading event details: $e';
    }
  } catch (e) {
    print('Error creating event: $e');
  }
  return 'success';
}

//Update event details
Future<String> updateEvent(String id, String category, String name,
    String image, String location, String time, double fee) async {
  String imageUrl;
  try {
    Reference ref = FirebaseStorage.instance.ref();
    Reference referenceDirImages = ref.child('images');
    //Create a reference to the file you want to upload
    Reference referenceImageToUpload =
        referenceDirImages.child('events/$name.jpg');
    print(name);
    //Upload the file to firebase
    try {
      await referenceImageToUpload.putFile(File(image));
      imageUrl = await referenceImageToUpload.getDownloadURL();
    } on FirebaseException catch (e) {
      print('Error uploading image: $e');
      return 'Error uploading image: $e';
    }

    // Upload the event details to firestore
    try {
      await FirebaseFirestore.instance.collection('events').doc(id).update({
        'event_category': category,
        'name': name,
        'image': imageUrl,
        'location': location,
        'time': time,
        'fee': fee,
      });
    } on FirebaseException catch (e) {
      print('Error updating event details: $e');
      return 'Error updating event details: $e';
    }
  } catch (e) {
    print('Error updating event: $e');
  }
  return 'success';
}

//Delete event
Future<String> deleteEvent(String id) async {
  try {
    await FirebaseFirestore.instance.collection('events').doc(id).delete();
  } catch (e) {
    print('Error deleting event: $e');
    return 'Error deleting event: $e';
  }
  return 'success';
}

//Get all events and save in a list
Future<List<Map<String, dynamic>>?> getEvents() async {
  List<Map<String, dynamic>> events = [];
  try {
    QuerySnapshot querySnapshot =
        await FirebaseFirestore.instance.collection('events').get();
    querySnapshot.docs.forEach((element) {
      events.add(element.data() as Map<String, dynamic>);
    });
  } catch (e) {
    print('Error getting events: $e');
  }
  return events;
}
//Update event details

//Do the same for buy and sell
Future<String> createBuyAndSell(String category, String name, String image,
    String location, String details, double price, String phone) async {
  //Get email from shared prefs
  getEmail().then((value) => prefEmail = value!);
  String imageUrl;
  try {
    Reference ref = FirebaseStorage.instance.ref();
    Reference referenceDirImages = ref.child('images');
    //Create a reference to the file you want to upload
    Reference referenceImageToUpload =
        referenceDirImages.child('buy_and_sell/$name.jpg');
    print(name);
    //Upload the file to firebase
    try {
      await referenceImageToUpload.putFile(File(image));
      imageUrl = await referenceImageToUpload.getDownloadURL();
    } on FirebaseException catch (e) {
      print('Error uploading image: $e');
      return 'Error uploading image: $e';
    }

    // Upload the event details to firestore
    try {
      final docRef =
          await FirebaseFirestore.instance.collection('buy_and_sell').add({
        'id': Uuid()
            .v4(), //unique id is automatically generated by firestore, no need to add it
        'owner': prefEmail,
        'category': category,
        'name': name,
        'image': imageUrl,
        'location': location,
        'details': details,
        'price': price,
        'phone': phone,
      });
      await docRef.update({'id': docRef.id});
    } on FirebaseException catch (e) {
      print('Error uploading buy and sell details: $e');
      return 'Error uploading buy and sell details: $e';
    }
  } catch (e) {
    print('Error creating event: $e');
  }
  return 'success';
}

//get all buy and sell items
Future<List<Map<String, dynamic>>?> getBuyAndSell() async {
  List<Map<String, dynamic>> items = [];
  try {
    QuerySnapshot querySnapshot =
        await FirebaseFirestore.instance.collection('buy_and_sell').get();
    querySnapshot.docs.forEach((element) {
      items.add(element.data() as Map<String, dynamic>);
    });
  } catch (e) {
    print('Error getting buy and sell items: $e');
  }
  return items;
}

//Update buy and sell item
Future<String> updateBuyAndSell(
    String id,
    String category,
    String name,
    String image,
    String location,
    String details,
    double price,
    String phone) async {
  String imageUrl;
  try {
    Reference ref = FirebaseStorage.instance.ref();
    Reference referenceDirImages = ref.child('images');
    //Create a reference to the file you want to upload
    Reference referenceImageToUpload =
        referenceDirImages.child('buy_and_sell/$name.jpg');
    print(name);
    //Upload the file to firebase
    try {
      await referenceImageToUpload.putFile(File(image));
      imageUrl = await referenceImageToUpload.getDownloadURL();
    } on FirebaseException catch (e) {
      print('Error uploading image: $e');
      return 'Error uploading image: $e';
    }

    // Upload the event details to firestore
    try {
      await FirebaseFirestore.instance
          .collection('buy_and_sell')
          .doc(id)
          .update({
        'category': category,
        'name': name,
        'image': imageUrl,
        'location': location,
        'details': details,
        'price': price,
        'phone': phone,
      });
    } on FirebaseException catch (e) {
      print('Error updating buy and sell details: $e');
      return 'Error updating buy and sell details: $e';
    }
  } catch (e) {
    print('Error updating buy and sell: $e');
  }
  return 'success';
}

//delete buy and sell
Future<String> deleteBuyAndSell(String id) async {
  try {
    await FirebaseFirestore.instance
        .collection('buy_and_sell')
        .doc(id)
        .delete();
  } catch (e) {
    print('Error deleting buy and sell: $e');
    return 'Error deleting buy and sell: $e';
  }
  return 'success';
}

//..........................CREATE NEW POST...........................
//Post has email,imageUrl,description, likes, phone, time
Future<String> createPost(
    String email, String image, String description, String phone) async {
  String imageUrl;
  try {
    Reference ref = FirebaseStorage.instance.ref();
    Reference referenceDirImages = ref.child('images');
    //Create a reference to the file you want to upload
    Reference referenceImageToUpload =
        referenceDirImages.child('posts/$description.jpg');
    print(email);
    //Upload the file to firebase
    try {
      await referenceImageToUpload.putFile(File(image));
      imageUrl = await referenceImageToUpload.getDownloadURL();
    } on FirebaseException catch (e) {
      print('Error uploading image: $e');
      return 'Error uploading image: $e';
    }

    // Upload the event details to firestore
    try {
      final docRef = await FirebaseFirestore.instance.collection('posts').add({
        //unique id is automatically generated by firestore, no need to add it
        'id': Uuid().v4(),
        'email': email,
        'image': imageUrl,
        'description': description,
        'likes': 0, //integer
        'phone': phone,
        'time': FieldValue.serverTimestamp(),
      });
      //update the post's id and set it to docRef.id
      await docRef.update({'id': docRef.id});
    } on FirebaseException catch (e) {
      print('Error uploading post details: $e');
      return 'Error uploading post details: $e';
    }
  } catch (e) {
    print('Error creating post: $e');
  }
  return 'success';
}

//like a post
Future<String> likePost(String id) async {
  try {
    await FirebaseFirestore.instance.collection('posts').doc(id).update({
      'likes': FieldValue.increment(1),
    });
  } catch (e) {
    print('Error liking post: $e');
    return 'Error liking post: $e';
  }
  return 'success';
}

Future<void> updateLikes(String email, String postId, bool isLiked) async {
  final FirebaseFirestore firestore = FirebaseFirestore.instance;
  final docRef = firestore.collection('posts').doc(postId);
  final doc = await docRef.get();
  print(doc.data());
  final likes = doc.get('likes') as int;
  SharedPreferences prefs = await SharedPreferences.getInstance();
  List<String> likedPosts = prefs.getStringList('likedPosts') ?? <String>[];
  if (isLiked) {
// Like the post
    await docRef.update({'likes': likes + 1});
    // likedPosts.add(postId);
    // prefs.setStringList('likedPosts', likedPosts);
    print("LIKED POSTS");
    //Add the post id to the list of liked_posts in firebase firestore

    try {
      final docRef =
          FirebaseFirestore.instance.collection('likedPosts').doc(postId);
      await docRef.set({
        'id': docRef.id,
        'email': email,
        'post_id': postId,
        'time': FieldValue.serverTimestamp(),
      });
      // final docRef =
      //     await FirebaseFirestore.instance.collection('likedPosts').add({
      //   //unique id is automatically generated by firestore, no need to add it
      //   'id': Uuid().v4(),
      //   'email': email,
      //   'post_id': postId,
      //   'time': FieldValue.serverTimestamp(),
      // });
      //update the post's id and set it to docRef.id
      // await docRef.update({'id': docRef.id});
    } on FirebaseException catch (e) {
      print('Error saving like $e');
    }
  } else {
    //Delete the post id to the list of liked_posts in firebase firestore

    try {
      await FirebaseFirestore.instance
          .collection('likedPosts')
          .doc(postId)
          .delete();
      print("like deleted");
    } catch (e) {
      print('Error deleting post: $e');
    }

// Dislike the post
    if (likedPosts.contains(postId)) {
      await docRef.update({'likes': likes - 1});
      likedPosts.remove(postId);
      prefs.setStringList('likedPosts', likedPosts);
      print("REMOVED likedPosts: $likedPosts");
    } else {
      print("Post not found in likedPosts");
      print("likedPosts: $likedPosts");
    }
  }
}

//get liked posts by id
Future<List<Map<String, dynamic>>?> getLikedPosts() async {
  List<Map<String, dynamic>> liked_posts = [];
  try {
    QuerySnapshot querySnapshot = await FirebaseFirestore.instance
        .collection('likedPosts')
        .orderBy('time', descending: true)
        .get();
    querySnapshot.docs.forEach((element) {
      liked_posts.add(element.data() as Map<String, dynamic>);
    });
  } catch (e) {
    print('Error getting posts: $e');
  }
  return liked_posts;
}

//Get all posts sorted by date, latest posts first
Future<List<Map<String, dynamic>>?> getPosts() async {
  List<Map<String, dynamic>> posts = [];
  try {
    QuerySnapshot querySnapshot = await FirebaseFirestore.instance
        .collection('posts')
        .orderBy('time', descending: true)
        .get();
    querySnapshot.docs.forEach((element) {
      posts.add(element.data() as Map<String, dynamic>);
    });
  } catch (e) {
    print('Error getting posts: $e');
  }
  return posts;
}

//Get posts by likes, most liked posts first
Future<List<Map<String, dynamic>>?> getPostsByLikes() async {
  List<Map<String, dynamic>> posts = [];
  try {
    QuerySnapshot querySnapshot = await FirebaseFirestore.instance
        .collection('posts')
        .orderBy('likes', descending: true)
        .get();
    querySnapshot.docs.forEach((element) {
      posts.add(element.data() as Map<String, dynamic>);
    });
  } catch (e) {
    print('Error getting posts: $e');
  }
  return posts;
}

//Delete post
Future<String> deletePost(String id) async {
  try {
    await FirebaseFirestore.instance.collection('posts').doc(id).delete();
    print("post deleted");
  } catch (e) {
    print('Error deleting post: $e');
    return 'Error deleting post: $e';
  }
  return 'success';
}
